# Unified docker-compose for v2t distributed system
# Use profiles to select deployment mode:
#   - single-node: Minimal setup for development/testing
#   - distributed: Full multi-node setup
#   - monitoring: Add monitoring stack

x-minio-common: &minio-common
  image: minio/minio:latest
  environment:
    MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
  networks:
    - v2t-network

x-temporal-env: &temporal-env
  DB: postgres12
  DB_PORT: 5432
  POSTGRES_USER: temporal
  POSTGRES_PWD: temporal
  POSTGRES_SEEDS: postgresql

services:
  # Core Services (always running)
  postgresql:
    image: postgres:15-alpine
    profiles: ["single-node", "distributed"]
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    ports:
      - "${POSTGRES_PORT:-5434}:5432"
    volumes:
      - temporal_postgres_data:/var/lib/postgresql/data
    networks:
      - v2t-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    image: temporalio/auto-setup:1.25.2
    profiles: ["single-node", "distributed"]
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      <<: *temporal-env
    ports:
      - "7233:7233"
    networks:
      - v2t-network

  temporal-ui:
    image: temporalio/ui:2.32.0
    profiles: ["single-node", "distributed"]
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    ports:
      - "8088:8080"
    networks:
      - v2t-network

  # MinIO - Single Node Mode
  minio:
    <<: *minio-common
    profiles: ["single-node"]
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO - Distributed Mode
  minio1:
    <<: *minio-common
    profiles: ["distributed"]
    hostname: minio1
    command: server http://minio{1...3}/data{1...2} --console-address ":9001"
    volumes:
      - minio1_data1:/data1
      - minio1_data2:/data2

  minio2:
    <<: *minio-common
    profiles: ["distributed"]
    hostname: minio2
    command: server http://minio{1...3}/data{1...2} --console-address ":9001"
    volumes:
      - minio2_data1:/data1
      - minio2_data2:/data2

  minio3:
    <<: *minio-common
    profiles: ["distributed"]
    hostname: minio3
    command: server http://minio{1...3}/data{1...2} --console-address ":9001"
    volumes:
      - minio3_data1:/data1
      - minio3_data2:/data2

  # MinIO Nginx Load Balancer (distributed mode)
  minio-nginx:
    image: nginx:alpine
    profiles: ["distributed"]
    depends_on:
      - minio1
      - minio2
      - minio3
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - v2t-network

  # MinIO Initialization
  minio-init:
    image: minio/mc:latest
    profiles: ["single-node", "distributed"]
    depends_on:
      minio:
        condition: service_healthy
        required: false
      minio-nginx:
        condition: service_started
        required: false
    entrypoint: >
      /bin/sh -c "
      if [ -n \"$${MINIO_NGINX_PORT}\" ]; then
        MC_HOST=http://minio-nginx:9000;
      else
        MC_HOST=http://minio:9000;
      fi;
      /usr/bin/mc alias set minio $$MC_HOST minioadmin minioadmin;
      /usr/bin/mc mb minio/v2t-transcriptions || true;
      /usr/bin/mc anonymous set download minio/v2t-transcriptions;
      exit 0;
      "
    environment:
      MINIO_NGINX_PORT: ${MINIO_NGINX_PORT:-}
    networks:
      - v2t-network

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - v2t-network

  grafana:
    image: grafana/grafana:latest
    profiles: ["monitoring"]
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning:ro
    networks:
      - v2t-network

volumes:
  temporal_postgres_data:
  minio_data:
  minio1_data1:
  minio1_data2:
  minio2_data1:
  minio2_data2:
  minio3_data1:
  minio3_data2:
  prometheus_data:
  grafana_data:

networks:
  v2t-network:
    driver: bridge