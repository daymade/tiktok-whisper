// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"log"
	"os"
	"path/filepath"
	"tiktok-whisper/internal/app/api"
	"tiktok-whisper/internal/app/api/openai"
	"tiktok-whisper/internal/app/api/openai/whisper"
	"tiktok-whisper/internal/app/api/provider"
	"tiktok-whisper/internal/app/api/whisper_cpp"
	"tiktok-whisper/internal/app/converter"
	"tiktok-whisper/internal/app/repository"
	"tiktok-whisper/internal/app/repository/sqlite"
	"tiktok-whisper/internal/app/util/files"
)

// Injectors from wire.go:

func InitializeConverter() *converter.Converter {
	transcriber := provideEnhancedTranscriber()
	transcriptionDAO := provideTranscriptionDAO()
	converterConverter := converter.NewConverter(transcriber, transcriptionDAO)
	return converterConverter
}

func InitializeProgressAwareConverter(config converter.ProgressConfig) *converter.ProgressAwareConverter {
	transcriber := provideEnhancedTranscriber()
	transcriptionDAO := provideTranscriptionDAO()
	converterConverter := converter.NewConverter(transcriber, transcriptionDAO)
	progressAwareConverter := converter.NewProgressAwareConverter(converterConverter, config)
	return progressAwareConverter
}

// InitializeConverterCompat creates a backward-compatible converter that uses V2 DAO
func InitializeConverterCompat() *converter.Converter {
	transcriber := provideEnhancedTranscriber()
	transcriptionDAOV2 := provideTranscriptionDAOV2()
	converterConverter := converter.NewConverter(transcriber, transcriptionDAOV2)
	return converterConverter
}

// wire.go:

// provideRemoteTranscriber with openai's remote service conversion, must set environment variable OPENAI_API_KEY
func provideRemoteTranscriber() api.Transcriber {
	return whisper.NewRemoteTranscriber(openai.GetClient())
}

// provideLocalTranscriber with native whisper.cpp conversion, you need to compile whisper.cpp/main executable by yourself
func provideLocalTranscriber() api.Transcriber {

	binaryPath := os.Getenv("WHISPER_CPP_BINARY")
	if binaryPath == "" {
		log.Fatal("WHISPER_CPP_BINARY environment variable must be set")
	}

	modelPath := os.Getenv("WHISPER_CPP_MODEL")
	if modelPath == "" {
		log.Fatal("WHISPER_CPP_MODEL environment variable must be set")
	}

	return whisper_cpp.NewLocalTranscriber(binaryPath, modelPath)
}

// provideEnhancedTranscriber provides the provider framework-based transcriber
func provideEnhancedTranscriber() api.Transcriber {

	transcriber := provider.NewSimpleProviderTranscriber()
	if transcriber == nil {
		log.Fatal("Provider framework initialization failed - check your configuration")
	}
	return transcriber
}

func provideTranscriptionDAO() repository.TranscriptionDAO {
	projectRoot, err := files.GetProjectRoot()
	if err != nil {
		log.Fatalf("Failed to get project root: %v\n", err)
	}

	dbPath := filepath.Join(projectRoot, "data/transcription.db")
	return sqlite.NewSQLiteDB(dbPath)
}

// provideTranscriptionDAOV2 provides the enhanced DAO with new fields support
func provideTranscriptionDAOV2() repository.TranscriptionDAOV2 {
	projectRoot, err := files.GetProjectRoot()
	if err != nil {
		log.Fatalf("Failed to get project root: %v\n", err)
	}

	dbPath := filepath.Join(projectRoot, "data/transcription.db")
	db := sqlite.NewSQLiteDB(dbPath)

	return db
}
