// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"log"
	"path/filepath"
	"tiktok-whisper/internal/app/api"
	"tiktok-whisper/internal/app/api/openai"
	"tiktok-whisper/internal/app/api/openai/whisper"
	"tiktok-whisper/internal/app/api/whisper_cpp"
	"tiktok-whisper/internal/app/converter"
	"tiktok-whisper/internal/app/repository"
	"tiktok-whisper/internal/app/repository/sqlite"
	"tiktok-whisper/internal/app/util/files"
)

// Injectors from wire.go:

func InitializeConverter() *converter.Converter {
	transcriber := provideNewLocalTranscriber()
	transcriptionDAO := provideTranscriptionDAO()
	converterConverter := converter.NewConverter(transcriber, transcriptionDAO)
	return converterConverter
}

// wire.go:

// provideTranscriber 用 openai 的远程服务转换, 必须设置环境变量 OPENAI_API_KEY
func provideTranscriber() api.Transcriber {
	return whisper.NewRemoteTranscriber(openai.GetClient())
}

// provideNewLocalTranscriber 用本地 whisper.cpp 转换, 需要自行编译出 whisper.cpp/main 可执行文件
func provideNewLocalTranscriber() api.Transcriber {
	binaryPath := "/Users/tiansheng/workspace/cpp/whisper.cpp/main"
	modelPath := "/Users/tiansheng/workspace/cpp/whisper.cpp/models/ggml-large-v2.bin"
	return whisper_cpp.NewLocalTranscriber(binaryPath, modelPath)
}

func provideTranscriptionDAO() repository.TranscriptionDAO {
	projectRoot, err := files.GetProjectRoot()
	if err != nil {
		log.Fatalf("Failed to get project root: %v\n", err)
	}

	dbPath := filepath.Join(projectRoot, "data/transcription.db")
	return sqlite.NewSQLiteDB(dbPath)
}
